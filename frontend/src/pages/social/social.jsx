import React, { useState, useEffect } from 'react'
import AccountHeader from '../../components/account/AccountHeader'
import UserPosts from '../../components/social/UserPosts'
import { getToken, executeRequestWithTokenRefresh, API_BASE_URL } from '../../utils/authUtils'
import { useNavigate } from 'react-router-dom'
import AccountMenu from '../../components/account/AccountMenu'
// –ï—Å–ª–∏ –∑–¥–µ—Å—å –µ—Å—Ç—å —Ä–æ—É—Ç–∏–Ω–≥, –¥–æ–±–∞–≤–∏—Ç—å:
// import UserProfile from './UserProfile';
// <Route path="/social/user/:userId" element={<UserProfile />} />
import axios from 'axios'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º axios
import { Helmet } from 'react-helmet-async';

const Social = () => {
  const [publicPosts, setPublicPosts] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [searchQuery, setSearchQuery] = useState('')
  const navigate = useNavigate()

  // const API_BASE_URL = process.env.REACT_APP_API_URL; // –£–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ authUtils

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const token = getToken();
        if (!token) {
          setError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.');
          setLoading(false);
          return;
        }
        const response = await executeRequestWithTokenRefresh(() =>
          axios.get(`${API_BASE_URL}/api/entries/public/`, {
            headers: {
              'Content-Type': 'application/json',
              Accept: 'application/json',
              Authorization: `Bearer ${token}`,
            },
          })
        );
        setPublicPosts(response.data);
      } catch (err) {
        console.error('Error fetching public entries:', err);
        setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏.');
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, [navigate]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É
  const filteredPosts = publicPosts.filter(post => {
    if (!searchQuery.trim()) return true;
    const query = searchQuery.trim().toLowerCase();
    // –ü–æ–∏—Å–∫ –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º
    if (query.startsWith('#')) {
      const tag = query.slice(1);
      return (post.hashtags || '').toLowerCase().split(',').some(t => t.trim().includes(tag));
    }
    // –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    const title = (post.title || '').toLowerCase();
    const content = (post.content || post.htmlContent || '').toLowerCase();
    const hashtags = (post.hashtags || '').toLowerCase();
    return title.includes(query) || content.includes(query) || hashtags.includes(query);
  });

  return (
    <>
      <Helmet>
        <title>–°–æ–æ–±—â–µ—Å—Ç–≤–æ</title>
      </Helmet>
      <AccountHeader />

      <div className="flex flex-grow h-screen">
        <AccountMenu/>
        <div className="flex flex-col flex-grow space-y-20">
          <div className="px-20 w-screen flex justify-center md:justify-end">
            <input
              type="text"
              className="card md:w-1/5 px-10 py-4 rounded-b-full focus:outline-none border-b border-b-gray-300"
              placeholder="üëÄ –ü–æ–∏—Å–∫"
              value={searchQuery}
              onChange={e => setSearchQuery(e.target.value)}
            />
          </div>

          <div className="w-screen px-7 md:px-20 space-y-10">
            <div></div>
            {loading ? (
              <p className="text-center text-gray-500">
                –ó–∞–≥—Ä—É–∑–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...
              </p>
            ) : error ? (
              <p className="text-center text-red-500">–û—à–∏–±–∫–∞: {error}</p>
            ) : filteredPosts.length === 0 ? (
              <p className="text-center text-gray-500">
                –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.
              </p>
            ) : (
              filteredPosts.map((post) => (
                <div key={post.id} className="mx-auto w-full md:w-1/2">
                  <UserPosts post={post} />
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </>
  )
}

export default Social
